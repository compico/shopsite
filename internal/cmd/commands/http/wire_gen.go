// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package http

import (
	"github.com/compico/shopsite/internal/database"
	"github.com/compico/shopsite/internal/di"
	"github.com/compico/shopsite/internal/handler"
	"github.com/compico/shopsite/internal/handler/error_handler"
	"github.com/compico/shopsite/internal/handler/page_render_handler"
	"github.com/compico/shopsite/web"
)

// Injectors from wire.go:

func InitializeApp(configPath string) (*App, error) {
	config, err := di.ProviderConfig(configPath)
	if err != nil {
		return nil, err
	}
	serverConfig := di.ProviderServerConfig(config)
	debugMode := error_handler.ProviderDebugMode(config)
	v := error_handler.NewErrorHandler(debugMode)
	views := di.ProviderHtmlRender(config)
	server := web.NewServer(serverConfig, v, views)
	router := di.ProviderRouter(server)
	pageRender := page_render_handler.NewPageRender(config)
	index := handler.NewIndex(config)
	getProducts := handler.NewGetProducts()
	registerRoutesResult := web.RegisterRoutes(router, serverConfig, pageRender, index, getProducts)
	databaseConfig := di.ProviderDatabaseConfig(config)
	connectionResult, err := di.ProviderDatabaseConnection(databaseConfig)
	if err != nil {
		return nil, err
	}
	app := &App{
		server: server,
		rr:     registerRoutesResult,
		dr:     connectionResult,
	}
	return app, nil
}

// wire.go:

type (
	App struct {
		server web.Server
		rr     web.RegisterRoutesResult
		dr     database.ConnectionResult
	}
)
